1、awk 基础语法
	1）awk 概述
		创造者：Aho、Weinberger、Kernighan
		基于模式匹配检查输入文本，逐行处理并输出
		通常用在Shell脚本中，获取指定的数据
		单独用时，可对文本数据做统计

	2）语法格式
		格式1：前置命令  |  awk  [选项]  '[条件]{指令}'
		格式2：awk  [选项]  '[条件]{指令}'  文件...
		常用选项：
			-F   可以指定分隔符，默认分隔符为空格或者Tab键

		vim  test.txt
		hello  the  world
		welcome  to  Beijing

		awk  '{print  $1,$3}'  test.txt		##打印第一列和第三列
		awk  -F:  '{print $1,$3}'  /etc/passwd	##打印第一列和第三列

	3）awk 内置变量
		内置变量都有特殊含义，可直接使用
		FS：保存或设置字段分隔符，例如 FS=":"，与-F 功能一样
		$n：指定分隔的第n个字段，如$1、$3分别表示第1、第3列
		$0：当前读入的整行文本内容
		NF：记录当前处理行的字段个数（列数）
		NR：记录当前已读入行的数量（行数）

		内置变量示例：
			awk  -F:  '{print NR,NF}'  /etc/passwd			##打印每行的行号和总列数
			awk  -F:  '{print $NF}'  /etc/passwd			##打印每行的最后一列
			awk  -F:  '{print  "用户名:" $1,"解释器:" $7}'  /etc/passwd	##通过汉字输出第一列和第七列

	4）awk 过滤的时机
		在所有行前处理，BEGIN{ }
			读入第一行文本之前执行
			一般用来初始化操作
		逐行处理，{ }
			逐行读入文本执行相应的处理
			是最常见的编辑指令块
		在所有行后处理，END{ }
			处理完最后一行文本之后执行
			一般用来输出处理结果

		BEGIN{}、{}、END{} 可以单独使用，也可以同时一起使用

		示例：
			awk  'BEGIN{a=34;print  a+12}'			##定义一个变量a，值为34，然后输出34+12的结果
			awk  'BEGIN{a=34;b=30;print  a+b}'			##定义变量a和b，分别赋值后，进行相加
			awk  'BEGIN{x=0}/bash$/{x++}END{print  x}'  /etc/passwd	##定义变量x=0，过滤/etc/passwd文件内容，
                                                每找到一行是bash结尾的行，就对x++，最后输出x的值
			awk  'BEGIN{print NR}END{print NR}'  /etc/passwd	##行前处理时打印行号，行后处理后打印行号
		

2、awk 基础应用案例
	1）监控操作系统信息
		过滤内存信息：
			free
			free  | awk '{print  $7}'			##打印第7列
			free  | awk '{print  $NF}'			##打印最后一列
			free  | grep Mem  |  awk '{print $NF}'		##打印包含Mem这行的最后一列
			free  | awk '/^Mem/{print $7}'		##打印以Mem开头的第7列

		过滤磁盘信息：
			df
			df  | grep "/$" | awk '{print $4}'		##打印第4列，磁盘剩余空间
			df  |  awk '/\/$/{print  $4}'			##打印第4列，磁盘剩余空间

		过滤CPU信息：
			LANG=C  lscpu	或 cat  /proc/cpuinfo			
			LANG=C  lscpu | grep  "Model name" | awk -F:  '{print  $2}'		##打印第2列，CPU的型号
			LANG=C  lscpu | grep  "^CPU(s)" | awk  '{print $2}'		##打印第2列，CPU的个数
			uptime
			uptime | awk  '{print $NF}'			##打印uptime命令的最后一列，cpu的15分钟负载
			uptime | awk  '{print  $10}'			##打印uptime命令的第10列，cpu的15分钟负载

		过滤网卡流量：
			ifconfig  ens33
			ifconfig  ens33 | grep  "RX p|TX p"	
			ifconfig  ens33 | grep  "RX p" | awk  '{print "进站流量为：" $5 "字节"}'		##打印第5列，显示网卡入站流量
			ifconfig  ens33 | grep  "TX p" | awk  '{print "出站流量为：" $5 "字节"}'		##打印第5列，显示网卡出站流量

		监控暴力破解的IP地址：
			ssh  root@192.168.4.7				##故意密码错误，导致链接失败，查看/var/log/secure文件的记录
			grep  "Failed"  /var/log/secure				
			grep  "Failed"  /var/log/secure  | awk '{print  $11}'	##打印安全日志文件中的第11列，显示访问的IP地址
			awk '/Failed/{print  $11}'  /var/log/secure		##打印安全日志文件中的第11列，显示访问的IP地址
			cat /var/log/secure | awk '$6=="Failed"{print $11}'
			awk '$6=="Failed"{print $11}'   /var/log/secure 



3、awk 条件判断
	1）条件判断概述：
		输出所有行还是输出部分行？
		如何限制仅输出部分行的数据内容？
		如何设置多个条件？

		语法：awk  [选项]  '[条件]{指令}'  文件...

		条件表达式：
			正则表达式
			数值/字符比较
			逻辑比较
			运算符

	2）正则
		/正则表达式/
		~匹配，!~不匹配
		awk  -F:  '/ro/{print}'  /etc/passwd
		awk  -F:  '/^ro/{print}'  /etc/passwd
		awk  -F:  '$7~/bash$/{print $1,$7}'  /etc/passwd
		awk  -F:  '$7!~/bash$/{print $1,$7}'  /etc/passwd

	3）数值/字符比较
		== 等于、!= 不等于
		> 大于、>= 大于等于
		< 小于、<= 小于等于
		awk  'NR==2{print}'  /etc/passwd
		awk  -F:  '$7!="/bin/bash"'  /etc/passwd
		awk  -F:  '$3>=1000{print $1,$3}'  /etc/passwd
	
	4）逻辑比较
		&& 逻辑与：期望多个条件都成立
		|| 逻辑或：只要有一个条件成立即满足要求	
		awk  -F:  '$3>=0&&$3<2{print $1,$3}'  /etc/passwd
		awk  -F:  '$3==1||$3=7{print $1,$3}'  /etc/passwd
	
	5）运算符
		+、-、*、/、%
		++、--、+=、-=、*=、/=
		awk  'NR%2==1{print}'  /etc/passwd
		awk  'NR%2==0{print}'  /etc/passwd
		seq  200 | awk 'BEGIN{i=0} $1%3==0 && $1%13==0 {i++}END{print i}'

		cat -n /etc/passwd  | awk -F: '$7!~/bash$/&&NR>=1&&NR<=10;'	  ##过滤不以bash结尾的行，并且行号在1-10行里面



4、awk 流程控制
	1）if语句
		单分支if判断：awk  '{if(){指令}}'  文件
			awk  -F： '{if($3>=1000){i++}}END{print i}'  /etc/passwd
			awk  -F:   '{if($1=="root"){print $1,$3}}'  /etc/passwd
			uptime | awk  '{if($NF>0.01){print  "CPU load:"$NF}}'

		双分支if判断：awk  '{if(){指令}else{指令}}'
			awk  -F:  '{if($3>=){i++}else{j++}}END{print "普通用户:"i,"系统用户:"j}'  /etc/passwd
			ls  -l  /etc  | awk  '{$1~/^-/{x++}else{j++}}END{print "文件个数为:"i,"目录个数为:"j}'

		多分支if判断：awk  '{if(){指令}else if(){指令}else{指令}}'
			ls  -l  /etc  | awk  '{if($1~/^-/){x++}else if($1~/^d/){y++}else{z++}}
				END{print "文本个数为:"x,"目录个数为:"y,"其他文件个数为:"z}'

	2）for循环语句
		格式：awk  '{for(表达式1;表达式2;表达式3){指令}}'
			awk  '{for(i=0;i<=5;i++){指令}}'
			awk  'BEGIN{for(i=1;i<=5;i++){print i}}'
			awk  'BEGIN{for(i=5;i>=1;i--){print i}}'
		

5、awk 数组与应用案例
	1）awk 数组的定义及应用
		定义数组：数组名[下标]=元素值
		调用数组：数组名[下标]
		遍历数组：for(变量名   in  数组名){print  数组名[变量]}

		应用案例：
			awk  'BEGIN{name[0]="jim";name[1]="tom";print name[1],name[0]}'
			awk  'BEGIN{age["tom"]=22;age["jim"]=18;print  age["tom"],age["jim"]}'
			awk  "BEGIN{x[0]=0;x[1]=1;x[2]=2;x[3]=33;x[4]=44;for(i in x){print x[i]}}"

			统计web访问日志：统计每个IP访问的次数
				vim  access_log
				172.40.1.18
				172.40.1.17
				172.40.1.18
				172.40.1.17
				172.40.1.16
				172.40.1.18
				awk  '{IP[$1]++}END{for(i in IP){print i,IP[i]}}'  access_log

			统计系统账户登录次数：
			 	who | awk  '{user[$1]++}END{for(i in user){print i,user[i]}}'



6、awk 综合案例
	1）ss命令
		-H	不显示标题行
		-n	以数字格式显示信息，不尝试解析服务名称
		-a	显示所有
		-p	显示进程信息
		-t	显示TCP连接的信息	
		-u	显示UDP连接的信息
		-s	显示汇总信息（RAW：用于namp安全等应用，INET：显示RAW/UDP/TCP总和，FRAG：碎片）
		-l	显示所有处于监听状态的信息

		ss  -at		##显示所有的TCP连接
		ss  -au		##显示所有的UDP连接
		ss  -atu		##显示所有的TCP/UDP连接
		ss  -atun		##显示所有的TCP/UDP连接，并用数字显示端口号
		ss  -atunp	##显示所有的TCP/UDP连接，并用数字显示端口号以及显示该连接的服务名
		ss  -atunpH	##显示所有的TCP/UDP连接，并用数字显示端口号以及显示该连接的服务名，不显示标题行
		ss  -s		##显示所有的汇总信息
		ss  -antlpH	##显示所有处于listen监听状态下的TCP连接

		脚本案例：过滤连接状态
			vim  /root/shell/day05/net.sh
			#!/bin/bash
			tcp=`ss -s | awk '$1=="TCP"{print $2}'`
			udp=`ss -s | awk '$1=="UDP"{print $2}'`
			tcp_listen=`ss -antlH | awk 'BEGIN{x=0}{x++}END{print x}'`
			tcp_estab=`ss -antH | awk 'BEGIN{x=0}/^ESTAB/{x++}END{print x}'`
			tcp_time_wait=`ss -antH | awk 'BEGIN{x=0}/^TIME-WAIT/{x++}END{print x}'`

			echo "TCP连接个数是：$tcp 个"
			echo "UDP连接个数是：$udp 个" 
			echo "所有处于listen监听状态下的TCP端口数是：$tcp_listen 个" 
			echo "所有处于established已连接状态下的TCP连接个数是：$tcp_estab 个" 
			echo "所有处于time_wait断开连接但还没断开连接状态下的TCP连接个数是：$tcp_time_wait 个"
			
				