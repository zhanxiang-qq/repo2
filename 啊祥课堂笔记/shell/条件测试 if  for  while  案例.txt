1、条件测试（上）	
	1）字符串比较
		是否为空：[  -z  字符串  ]
		是否不为空：[   !  -z  字符串  ]		##等同于 [  -n   "字符串"  ]
		等于：[  字符串1  ==  字符串2  ]
		不等于：[  字符串1  !=  字符串2  ]

		[  -z  $a  ]
		echo  $?
		a=abc
		[  -z  $a  ]
		echo  $?
		[  abc == abc ]
		echo $?
		[  abc == abcd ]
		echo $?
		[  abc != abc ]
		echo $?
		[  abc != abcd ]
		echo $?
                          使用-z或-n判断字符串长度时，变量要加双引号、或者双中括号
	2）数值比较
		等于：-eq                 equal
		不等于：-ne             Not equal
		大于或等于：-ge      Greater than or equal
		小于或等于：-le        Less than or equal 
		大于：-gt                 greater than
		小于：-lt                  less than
                       ==  test  1  -eq 1 
		[ 2 -eq 2 ]
		echo $?
		[ 2 -eq 3 ]
		echo $?
		[ 2 -ne 3 ]
		echo $?
		[ 2 -le 2 ]
		echo $?
		[ 2 -le 1 ]
		echo $?
		[ 10 -gt 15 ]
		echo $?
		[ 10 -gt 9 ]
		echo  $?
		[ 10 -lt 15 ]
		echo $?
		[ 10 -lt 9 ]
		echo $? 

	3）文件状态测试
		格式：[  操作符  文件或目录  ]
		-e：判断对象是否存在，若存在则结果为真
		-d：判断对象是否为目录，是则为真
		-f：判断对象是否为文件，是则为真
		-r：判断对象是否有可读权限，是则为真
		-w：判断对象是否有可写权限，是则为真
		-x：判断对象是否有可执行权限，是则为真

		[  -e  "/etc/passwd" ]
		echo  $?
		[  -e  "/root" ]
		echo  $?
		[ -d "/etc/passwd" ]
		echo $?
		[ -d "/root" ]
		echo  $?
		[ -f "/etc/passwd" ]
		echo  $?
		[ -f "/root" ]
		echo  $?
		[  -r  "/etc/passwd" ]
		echo  $?
		[  -w "/etc/passwd" ]
		echo $?
		[ -x "/etc/passwd" ]
		echo  $?
                         3）运算符 描述 示例 
                                    ! 非关系，条件结果取反 [ ! 1 -eq 2 ]为 true 
                                    -a 和关系，在[]表达式中使用 [ 1 -eq 1 -a 2 -eq 2 ]为 true 
                                    -o 或关系，在[]表达式中使用 [ 1 -eq 1 -o 2 -eq 1 ]为 true

2、条件测试（下）
	1）使用控制符组合多个命令进行条件测试
		；	##按照顺序进行命令的执行
		&&	##当符号前的命令执行成功，才执行符号后的命令
		||	##当符号前的命令执行失败，才执行符号后的命令
		
		cd  /root;ls
		cd /sdadasd;ls
		[  2  -eq  2 ] && echo yes
		[  2  -eq  3 ] && echo yes
		[  2  -eq  2 ] || echo yes
		[  2  -eq  3 ] || echo yes
		[  2  -eq  2 ] && echo yes || echo no
		[  2  -eq  3 ] && echo yes || echo no
		
	2）tr -s 命令删除多余重复的字串
		例如：echo  "a   b    c"   | tr  -s  " "	##删除多余的空格
		
	3）cut 按照列进行数据过滤
		例如：cut  -d:  -f1  /etc/passwd	##以冒号为分隔，显示第一列内容
		-d：指定分隔符
		-f：显示第几列

		echo "a   b    c" | tr  -s " " | cut  -d" "  -f1
		echo "a   b    c" | tr  -s " " | cut  -d" "  -f2
		echo "a   b    c" | tr  -s " " | cut  -d" "  -f3

	4）监控系统信息脚本
		vim  /root/shell/day02/info.sh
		#!/bin/bash
		# 1、获取系统时间
		# 2、获取网卡IP地址
		# 3、获取系统剩余内存大小
		# 4、获取磁盘空间剩余大小
		# 5、获取CPU 每15分钟的平均负载量
		# 6、获取当前系统登陆的用户总数
		# 7、获取当前系统的进程数量
		dates=`date +"%Y-%m-%d %H:%M:%S"`
		ips=`ifconfig ens33 | grep netmask | tr -s " " | cut -d " " -f3`
		neicun=`cat /proc/meminfo | grep "MemAvailable" | tr -s " " |cut -d" " -f2`
		disk=`df | grep "/$" | tr -s " " | cut -d" " -f4`
		cpus=`cat /proc/loadavg | cut -d " " -f3`
		users=`who |wc -l`
		jincheng=`ps aux |wc -l`
		[ $neicun -lt 20000000 ] && echo "时间：$dates，主机：$ips，内存不足，当前系统剩余内存是：$neicun"  || mail -s "警告" root@localhost
		[ $disk -lt 1000000000 ] && echo "时间：$dates，主机：$ips，磁盘空间不足，当前系统剩余磁盘空间大小是：$disk"  || mail -s "警告" root@localhost
		result=`echo "$cpus>0.01"  ||  bc`
		[ $result -eq 1 ] && echo "时间：$dates，主机：$ips，CPU负载量过高，当前系统CPU 15分钟的平均负载量是：$cpus"  ||  mail -s "警告" root@localhost
		[ $users -ge 2 ] && echo "时间：$dates，主机：$ips，登录用户过多，当前系统登录的用户数量是：$users"  ||  mail -s "警告" root@localhost
		[ $jincheng -gt 50 ] && echo "时间：$dates，主机：$ips，运行的进程数量过多，当前系统运行的进程总数量是：$jincheng"  ||  mail -s "警告" root@localhost
		:wq
		chmod +x /root/shell/day02/info.sh
		cd  /root/shell/day02/
		./info.sh

3、if 语句
	1）if 单分支语法
		格式：if  条件测试;then
			命令序列
		          fi

		脚本案例：判断用户名和密码是否为空
		vim  /root/shell/day02/user.sh
		#!/bin/bash
		read -p "请输入用户名:" username
		read -p "请输入密码:" password
		if [ ! -z $username ] && [ ! -z $password ];then
        			useradd $username
        			echo $password | passwd --stdin $username
		fi
		

	2）if 双分支语法
		格式：if  条件测试;then
			命令序列1
		          else
			命令序列2
		          fi

		脚本案例：测试主机是否能 ping 通		
		#!/bin/bash
		if [ -z $1 ];then
        			echo -n "执行脚本的格式："
        			echo -e "\033[32m脚本 域名或IP\033[0m"
        			exit
		fi
		ping -c2 -i0.1 -W1 $1 &> /dev/null
		if [ $? -eq 0 ];then
        			echo "$1 is up"
		else
       			 echo "$1 is down"
		fi

		

	3）if 多分支判断
		格式：if  条件测试1;then
			命令序列1
		          elif  条件测试2;then
			命令序列2
		          ... ...	
		          else
			命令序列n
		          fi
		
		脚本案例：猜数字游戏
		vim  /root/shell/day02/caishuzi.sh
		#!/bin/bash
		num=$[RANDOM%100+1]
		read -p "请输入一个1-100之间的数字：" guess
		if [ $guess -eq $num ];then
       			echo "恭喜，猜对了"
		elif [ $guess -lt $num ];then
        			echo "猜小了"
		else
        			echo "猜大了"
		fi


4、for 循环
	1）for 循环语法格式
		根据变量的不同取值，重复执行命令序列
		for  i  in  值列表
		do
			命令序列
		done

		for  ((初值;条件;步长))
		do
			命令序列
		done

	2）脚本案例
		案例1：循环输出数字和字符
			vim  /root/shell/day02/for01.sh
			for  i  in  qq  ww  abc  123
			do
				echo  "I am is $i"
			done	
			
		案例2：循环创建10个系统账户
                                               seq $a:表示列出从1-a的数列
			vim  /root/shell/day02/for02.sh
			for  i  in  {1..10} = `seq $a`     (a=10)
			do
				useradd  user$i
				echo  123456 | passwd --stdin user$i
			done

		案例3：批量创建不规则的用户账户
			vim  /root/user.txt
			abc
			abcd
			zhangsan
			lisi
			wangwu
			:wq
			vim  /root/shell/day02/for03.sh
			for  i  in  `cat /root/user.txt`
			do
				useradd  $i
				echo  123456 | passwd  --stdin  $i
			done
			
		
		案例4：打印9*9乘法表
			vim  /root/shell/day02/for04.sh
			for ((i=1;i<=9;i++))
			do
				for  ((j=1;j<=i;j++))
				do
					echo  -n  "$i*$j=$[i*j]  "
				done
				echo
			done

5、while 循环
	1）语法结构机特点
		反复测试条件，只要成立就执行命令序列
		while  条件测试			##[ $i  -le  5 ] 或者  ：（冒号代表条件永远为真，也就是死循环）
		do	
			命令序列
		done

	2）脚本案例
		案例1：批量创建用户
			vim  /root/shell/day02/adduser.sh
			#!/bin/bash
			i=1
			while [ $i -le 100 ]
			do
        				useradd abc$i
        				echo 123456 | passwd --stdin abc$i
        				let i++
			done
		
		案例2：猜随机数
			#!/bin/bash
			num=$[RANDOM%1000+1]
			while :
			do
        				read -p "请输入一个1-1000之间的数字：" guess
       				if [ $guess -eq $num ];then
               				 	echo "恭喜，猜对了"
                				exit
        				elif [ $guess -lt $num ];then
                				echo "猜小了"
        				else
                				echo "猜大了"
        				fi
			done

		

6、综合脚本案例
	案例1：一键部署FTP服务
		vim  /root/shell/day02/ftp.sh
		#!/bin/bash
		rjb="vsftpd"
		rpm -q $rjb &> /dev/null
		if [ $? -eq 0 ];then
        			echo "$rjb 已经安装"
		else
        			yum -y install $rjb
		fi
		systemctl restart $rjb
	
	案例2：监控网络流量
		vim  /root/shell/day02/wangluo.sh	
		#!/bin/bash
		while :
		do
        			clear
       			ruzhan=`ifconfig ens33 | grep "RX pack" | tr -s " " | cut -d" " -f6`
       			chuzhan=`ifconfig ens33 | grep "TX pack" | tr -s " " | cut -d" " -f6`
        			echo -e "\033[34m您的网卡流量监控显示如下：\033[0m"
        			echo -e "\033[32m入站流量是：$ruzhan\033[0m"
        			echo -e "\033[32m出站流量是：$chuzhan\033[0m"
        			sleep 1
		done

	案例3：统计闰年
		vim  /root/shell/day02/runnian.sh
		#!/bin/bash
		# 条件1：能把4整除，并且不能整除100的年份就是闰年
		# 条件2：能把400整除的年份，就是闰年
		# 满足条件1或条件2其中一种，即就是闰年
		for i in {1..5000}	
		do
        			if [[ $[i%4] -eq 0 && $[i%100] -ne 0  ||  $[i%400] -eq 0 ]];then
                			echo "$i: 是闰年"
        			else
                			echo "$i: 是平年"
       		 	fi
		done
	
	案例4：计算等差数列之和
		vim  /root/shell/day02/dcshulie.sh
		#!/bin/bash
		sum=0
		i=1
		read -p "请输入一个数值进行累加：" guess
		while [ $i -le $guess ]
		do
        			sum=$[sum+i]
        			let i++
		done
		echo -e "\033[32m从1至$guess数字累加之和为：$sum\033[0m"