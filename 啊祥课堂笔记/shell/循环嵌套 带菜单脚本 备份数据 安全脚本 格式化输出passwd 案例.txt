1、循环嵌套脚本案例
	案例1：打印星星矩阵
		vim  /root/shell/day06/test01.sh
		#!/bin/bash
		for i in {1..5}
		do
        			echo -n "* "
		done
		echo

		for i in {1..5}
		do
        			for i in {1..5}
        			do
                			echo -n "* "
        			done
        			echo
		done	

	案例2：排列与组合
		vim  /root/shell/day06/test02.sh
		#!/bin/bash
		for i in {1..3}
		do
        			for j in {1..3}
        			do
                			echo $i$j
        			done
		done

	案例3：打印形状
		1）打印楼梯
		vim  /root/shell/day06/test03.sh
		#!/bin/bash
		for((i=1;i<=6;i++))
		do
        			for((j=1;j<=i;j++))
        			do
                			echo -ne "\033[41m  \033[0m"
        			done
        			echo
		done

		2）打印倒着的楼梯
		vim  /root/shell/day06/test04.sh
		#!/bin/bash
		for((i=1;i<=6;i++))
		do
        			for((j=6;j>=i;j--))
        			do
                			echo -ne "\033[41m  \033[0m"
        			done
        			echo
		done

		3）打印正倒楼梯
		vim  /root/shell/day06/test05.sh
		#!/bin/bash
		for((i=1;i<=6;i++))
		do
        			for((j=1;j<=i;j++))
        			do
                			echo -ne "\033[41m  \033[0m"
        			done
        			echo
		done

		for((i=1;i<=5;i++))
		do
        			for((j=5;j>=i;j--))
        			do
                			echo -ne "\033[41m  \033[0m"
        			done
        			echo
		done

2、带菜单的脚本
	案例1：带菜单的脚本
	vim  /root/shell/day06/test06.sh
	#!/bin/bash
	echo "1.查看剩余内存容量."
	echo "2.查看根分区剩余容量."
	echo "3.查看CPU 15分钟负载."
	echo "4.查看系统进程数量."
	echo "5.查看系统账户数量"
	echo "6.退出."

	while :
	do
        		read -p "请输入选项【1-6】："   key
        		case $key in
        		1)
                		free | awk '/^Mem/{print $NF}';;
        		2)
                		df -h | awk '/\/$/{print $4}';;
        		3)
                		uptime | awk '{print $NF}';;
        		4)
                		ps aux | wc -l;;
        		5)
                		sed -n '$=' /etc/passwd;;
        		6)
                		exit;;
        		*)
                		echo "请输入【1-6】的数字！"
        		esac
	done

3、备份脚本案例
	案例1：备份日志
		vim  /root/shell/day06/test07.sh
		#!/bin/bash
		date=`date +%Y%m%d`
		if [ ! -f /tmp/log-$date.tar.gz ];then
        			tar -zcf /tmp/log-$date.tar.gz  /var/log
		fi

	案例2：备份数据库（逻辑备）
		vim  /root/shell/day06/test08.sh
		#!/bin/bash
		date=`date +%Y%m%d`
		user=root
		pass=
		db=mysql
		if [ ! -f /tmp/$db-$date.sql ];then
        			mysqldump -u$user --password="$pass" $db > /tmp/$db-$date.sql
		fi

	案例3：备份数据库（物理备）
		vim  /root/shell/day06/test09.sh
		#!/bin/bash
		date=`date +%Y%m%d`
		db_dir=/var/lib/mysql
		db=mysql
		[ ! -d /tmp/$db ] && mkdir /tmp/$db
		for i in `ls $db_dir/$db`
		do
        			tar -zcf /tmp/$db/$i-$date.tar.gz $db_dir/$db/$i
		done

	案例4：差异备份（rsync+inotify）
		yum -y install httpd
		cd   /root
		tar  -xf  /root/tools.tar.gz
		cd tools
		tar   -xf  inotify-tools-3.13.tar.gz
		cd  inotify-tools-3.13
		yum  -y  install  gcc  make
		./configure
		make  &&  make  install
		vim  /root/shell/day06/test10.sh
		#!/bin/bash
		from_dir="/var/www/html/"
		rsync_cmd="rsync -az --delete $from_dir  root@192.168.4.207:/var/www/html"
		while  inotifywait  -rqq  -e  modify,move,create,delete,attrib  $from_dir
		do
        			$rsync_cmd
		done &


4、安全脚本
	1）HASH值
		HASH值与文件、时间、大小等信息无关，仅与内容有关
		MD5
		SHA256
		md5sum  /etc/passwd
		sha256sum  /etc/passwd
		
		数据安全检测脚本：
			vim  /root/shell/day06/confhash.sh
			#!/bin/bash
			for  i  in  `ls  /etc/*.conf`
			do
				md5sum  $i  >>  /tmp/data.log
			done

	2）ssh 配置
		ssh主配置文件：/etc/ssh/sshd_config
		Port  3389		##改用非标准端口
		PermitRootLogin  no  	##禁用root登录
		UseDNS  no 		##不解析客户机地址
		AllowUsers  账户名		##设置远程连接的白名单，多个用户空格分割

		cp  /etc/ssh/sshd_config   /opt/sshd_config
		vim  /root/shell/day06/sedssh.sh
		#!/bin/bash
		conf="/opt/sshd_config"
		sed -i '/^#Port/s/22/1122/;/^#Port/s/#//' $conf
		sed -i '/^#PermitRootLogin/s/yes/no/;/^#PermitRootLogin/s/#//' $conf
		sed -i '/^#UseDNS/s/yes/no/;/^#UseDNS/s/#//' $conf
		sed -i '$a AllowUsers tom' $conf


5、格式化输出 passwd
	1）格式化输出
		awk  -F:  'BEGIN{print  "用户名 UID 家目录"}{print  $1,$3,$6}'  /etc/passwd  |  column  -t

	2）awk 调用shell变量
		vim  /root/shell/day06/userpass.sh
		#!/bin/bash
		user=`awk -F: '/bash$/{print $1}' /etc/passwd`
		for i in $user
		do
        			awk -F: -v iuser=$i '$1==iuser{print $1,$2}' /etc/shadow
		done
	

6、见pxe.sh