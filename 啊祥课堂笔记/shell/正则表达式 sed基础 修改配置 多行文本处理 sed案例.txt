1、正则表达式（上）
	1）什么是正则表达式？
                正则表达式
1.	查找过程中撇匹配指定的字符
2.	Locate  find  vim grep sed awk 都支持正则表达式
一、能干什么：
1.	匹配邮箱，身份证号码。手机号。银行卡号
2.	匹配某些特定的字符串，做特定处理等等
二、名词解释
  元字符：正则表达式中具有特殊意义的专又红字符 如 .  *  ? 等
  前异字符：abc*  aoo.
三、第一类正则表达式
   （一）正则中普通常用的元字符
                                ^$            空行
		^	匹配开头
		$	匹配结尾
		[集合]	匹配集合中的任意单个字符
		[^集合]	对集合取反
		.	匹配任意单个字符
		*	匹配前一个字符任意次（包含0次）
		.*	匹配任意
		\{n,m\}	匹配前一个字符n到m次
		\{n,\}	匹配前一个字符至少n次
		\{n\}	匹配前一个字符n次
                                ^[ ]           匹配括号里任意单个字符或一组单个字符
                                ^[^ ]        匹配不以括号里任意但个字符或者一组单个字符开头
		grep  root  /etc/passwd
		grep  ^root  /etc/passwd
		grep  bash$  /etc/passwd
		grep  "[abc]"  /etc/passwd
		grep  "[^abc]"  /etc/passwd
		grep  "."	/etc/passwd
		grep  ".*"  /etc/passwd
		grep  "r.*t"  /etc/passwd
		grep  "r..t"  /etc/passwd
		grep  "r.t"  /etc/passwd
		grep  "[0-9]"  /etc/passwd
		grep  "[^0-9]"  /etc/passwd
		grep  "[0-9]\{3,4\}"  /etc/passwd
		grep  "[0-9]\{3,\}"  /etc/passwd
		grep  "[0-9]\{3\}"  /etc/passwd
		grep  "[0-9]\{5\}"  /etc/passwd
	
	3）扩展正则
		+	匹配前面的字符至少一次
		?	匹配前面的字符0或1次
		()	组合与保留
		|	或者
		{n,m}	匹配前一个字符n到m次
		{n,}	匹配前一个字符至少n次
		{n}	匹配前一个字符n次

		grep  -E  "0{2,3}"  /etc/passwd
		grep  -E  "[a-z]+"  /etc/passwd
		grep  -E  "[^a-z]"  /etc/passwd
		grep  -E  "s?bin"  /etc/passwd
		grep  -E  "root|daemon"   /etc/passwd
		echo  "ababab"  | grep  ab
		echo  "ababab"  | grep  -E  "(ab){1}"
		echo  "ababab"  | grep  -E  "(ab){2}"
		echo  "ababab"  | grep  -E  "(ab){3}"
		echo  "abababab"  |  grep  -E  "(ab){1}"
		echo  "abababab"  |  grep  -E  "(ab){2}"
		echo  "abababab"  |  grep  -E  "(ab){3}"
		echo  "abababab"  |  grep  -E  "(ab){4}"

	4）Perl 兼容的正则
		\b	匹配单词边界
		\w	匹配字符数字下划线
		\W	和\w相反
		\s	匹配空白
		\d	匹配数字
		\d+	匹配多个数字
		\D	匹配非数字	

		grep  -P  "bin"  /etc/passwd
		grep  -P  "\bbin"  /etc/passwd
		grep  -P  "bin\b"  /etc/passwd
		grep  -P  "\bbin\b"  /etc/passwd
		grep  -P  "\w"  /etc/passwd
		grep  -P  "\W"  /etc/passwd
		grep  -P  "\s"  /etc/passwd
		grep  -P  "\d"  /etc/passwd
		grep  -P  "\d+"  /etc/passwd
		grep  -P  "\D"   /etc/passwd

2、正则表达式（下）
	1）grep [选项]  匹配模式  [文件]...
		常用选项：
			-i	忽略大小写
			-v	取反匹配
			-w	匹配单词
			-q	静默匹配，不将结果显示再屏幕
                        egrep
                                        -c   统计匹配的行数 
                                        -n   显示出匹配结果所在的行号
                                        -color  标红显示匹配子串
	2）从 《python.txt》文件中过滤如下数据：
		过滤包含 the 的行
			grep  "the"  python.txt
 		不区分大小写过滤包含 the 的行
			grep  -i  "the"  python.txt
		过滤不包含 the 的行
			grep  -iv  "the"  python.txt
		过滤包含数字的行
			grep  "[0-9]"  python.txt
		过滤包含 bet 或者 better 的行
			grep  -E  "bet|better"  python.txt
			grep  -E  "bet(ter)?"   python.txt
		过滤包含 2 个字母 o 的行
			grep  "oo"  python.txt
		过滤包含1-2个字母 o 的行
			grep  "o\{1,2\}"  python.txt
			grep   -E  "o{1,2}"  python.txt
		过滤不包含字母 o 的行
			grep  -v  "o"  python.txt
 		过滤大写字母开头的行
			grep  "^[A-Z]"  python.txt
 		过滤小写字母开头的行
			grep  "^[a-z]"  python.txt
		过滤 ou 前面不是 th 的行
			grep  "[^(th)]ou"  python.txt
		过滤不以标点符号结束的行
			grep  "[0-9a-zA-Z_]$"  python.txt
		过滤空白行
			grep  "^$"  python.txt
		过滤以 . 结尾的行
			grep   "\.$"  python.txt
		过滤以数字开始的行
			grep  " "  python.txt
		过滤包含2个以上 z 的行
			grep  "z\{2,\}"  python.txt
			grep  -E  "z{2,}"  python.txt
		过滤所有字母
			grep  "[a-zA-Z]"  python.txt
		过滤所有标点符号
			grep  -P "\W"    python.txt


3、sed 基础
	1）什么是 sed
		Stream Editor：流式编辑器
			非交互式
			逐行处理
			可以对文本进行增、删、改、查等操作
		语法：
			sed  [选项]  '[定位符]指令'  文件名
			命令  |  sed  [选项]  '[定位符]指令'
			常用选项：
				-n	屏蔽默认输出
				-i	直接修改源文件
				-r	支持扩展正则
	2）定位符
		行号定位：sed 可以使用行号来定位自己需要修改的数据内容
		
			sed  -n  '3p'   /etc/passwd		##打印第3行
			sed  -n  '1,3p'   /etc/passwd		##打印1到3行
			sed  -n  '1~2p'  /etc/passwd		##第1行开始，步长为2（步长：每隔2行打印一次）
			sed  -n  '2~2p'  /etc/passwd		##第2行开始，步长为2
			sed  -n  '2,+3p'  /etc/passwd		##第2行以及后面的3行	

		正则定位：sed 可以使用正则匹配需要的数据，然后再编辑对应的内容
			grep  ^root   /etc/passwd		##过滤root开头的行
			sed  -n  '/^root/p'  /etc/passwd
			egrep   "[0-9]{3}"  /etc/passwd	##过滤包含3个数字的行
			sed  -rn  '/[0-9]{3}/p'  /etc/passwd



4、使用 sed 修改配置
	1）常用 sed 指令
		过滤数据：p（打印行）
			sed -n '/IPADDR/p' /etc/sysconfig/network-scripts/ifcfg-ens33	##打印包含IPADDR的行
			free | sed -n "/Mem/p"					##打印包含Mem的行
			df -h | sed -n '/\/$/p'					##打印以/号结尾的行
			sed -n '1p;3p;6p' /etc/passwd					##打印第1行、第3行、第6行
			sed -n '2!p' /etc/passwd					##打印除第2行以外的所有内容

		删除数据：d（删除行）
			sed 'd' /etc/hosts			##删除所有数据
			cat /etc/fstab  >  /tmp/fstab	
			sed '1,3d' /tmp/fstab		##删除1至3行
			sed '/dev/d' /tmp/fstab		##删除包含dev的行
			sed '/dev/!d' /tmp/fstab		##删除不包含dev的行
			sed '/^#/d' /tmp/fstab		##删除以#开头的注释行
			sed '/^#/!d' /tmp/fstab		##删除除#开头的所有行
			sed '/^$/d' /tmp/fstab		##删除空白行
			

		替换数据：c（替换行）
			sed 'c 123456' /tmp/fstab 			##替换所有行为123456
			file=/etc/sysconfig/network-scripts/ifcfg-ens33 	
			sed '/IPADDR/c IPADDR=1.1.1.1' $file		##将包含IPADDR的行替换为IPADDR=1.1.1.1
			sed '/127/c 127.0.0.1 localhost' /etc/hosts	##将包含127的行替换为127.0.0.1 localhost
			sed '4c xxxx' /etc/shells			##将第4行替换为xxxx
		
		按照关键词替换数据：s（替换关键词）

			sed  's/2046/xxxx/'  test.txt			##替换每行的第一个2046为xxxx
			sed  's/2046/xxxx/g'  test.txt			##替换每行的所有2046为xxxx
			sed  's/2046/xxxx/2'  test.txt			##替换每行的第二个2046为xxxx
			sed  's/2046/(&)/g'  test.txt			##替换每行的所有2046为(2046)
			sed  '2s/2046/xxxx/g'  test.txt			##替换第二行的所有2046为xxxx
			sed  '2s/2046//g'  test.txt			##替换第二行的所有2046为空格
			sed  -n  '2s/2046/xxxx/p'  test.txt		##替换第二行的第一个2046为xxxx
			sed -n '3s/2046/xxxx/p' test.txt		##替换第三行的第一个2046为xxxx
			sed -n '3s/2046/xxxx/gp' test.txt		##替换第三行的所有2046为xxxx
			
			sed  's#2046#xxxx#g' test.txt			##以#为替换符
			sed  's,2046,xxxx,g' test.txt			##以 ，为替换符
			sed  's!2046!xxxx!g' test.txt			##以 ！为替换符
			sed  's2\20462xxxx2g' test.txt			##以 2 为替换符
			sed  's2\20462\20492g' test.txt		
			
			echo "hello the world" | sed -r 's/^(.)(.*)(.)$/\3\2\1/'	##保留，复制粘贴的作用，第一个圆括号代表\1，第二个圆括号代表\2，以此类推
	
		输出包含关键词的行号：=（打印行号）
			sed  -n '1='  /etc/passwd			##打印第一行行号
			sed  -n '/root/='  /etc/passwd		##打印包含root的行的行号
			sed  -n '/^root/='  /etc/passwd		##打印以root开头的行的行号
			sed  -n '$='  /etc/passwd			##打印末尾行的行号
			wc -l  /etc/passwd
			
5、sed 多行文本处理
	1）常用指令
		i：插入，行前写入
			sed '2i  abc_123'  test.txt
			sed '3i  abc_123'  test.txt
			sed '/2046/i  abc\n123'  test.txt
			sed '/1888/i  abc\n123'  test.txt

		a：追加，行后写入
			sed '2a abc_123' test.txt
			sed '3a abc_123' test.txt
			sed '/2046/a abc\n123' test.txt
			sed '/1888/a abc\n123' test.txt			

		r：读取文件 | 导入其他文件的内容
			sed '2r /etc/hosts'  test.txt
			sed 'r /etc/hosts'  test.txt
			sed '/1888/r /etc/hosts'  test.txt

		w：文件另存为 | 将文件内容导出另存为其他文件
			sed 'w w.txt' test.txt
			sed '/1888/w 1888.txt' test.txt
			sed '1,3w line.txt' test.txt

6、sed 综合案例
	1）点名器脚本
		vim  /root/name.txt
		李白
		杜甫
		白居易
		孟浩然
		苏轼
		:wq
		vim  /root/shell/day04/roll.sh
		#!/bin/bash
		url=/root/name.txt
		names=`sed -n '$=' $url`
		while :
		do
        			clear
        			rands=`echo $[RANDOM%names+1]`
        			str=`sed -n "${rands}p" $url`
        			echo $str
        			sleep 0.3
		done
	
	2）抓取tmooc首页所有图片
		vim  /root/shell/day04/pacon.sh
		#!/bin/bash
		url="/tmp/spider_$$.txt"
		curl -s http://www.tmooc.cn > $url
		echo "正在获取资源，请稍后..."
		sed -i '/<img src=/!d' $url
		sed -i 's/.*src="//' $url
		sed -i 's/".*//' $url
		rpm -q wget &> /dev/null
		if [ $? -ne 0 ];then
        			yum -y install wget
		fi
		mkdir /root/imgs
		for i in `cat $url`
		do
        			wget -P /root/imgs -q $i
        			echo "$i 下载完成."
		done
		rm -rf $url


使用sed过滤出网卡mac地址
ifconfig | grep -E '([0-9a-f]{2}:){5}[0-9a-f]{2}'


vim编辑一个1.txt，文件内容为  123456789a111111111111111b987654321
然后使用sed 保留的方式将文本第10个字符 a 与倒数第10个字符 b 替换位置?























