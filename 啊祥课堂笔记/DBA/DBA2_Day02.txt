1、主键primary  key(上)
	1）创建主键
		使用规则：
			字段不允许重复，且不允许赋NULL值
			一个表中只能有一个primary  key字段
			多个字段都作为主键，称为复合主键，必须一起创建
			主键字段的标志是PRI
			主键通常与 auto_increment 连用
			通常把表中唯一标识记录的字段设置为主键[记录编号字段]

	2）创建主键
		建表时创建主键：
			create table 库名.表名(字段1  类型  primary key，字段2 类型...);
		
		在已有表添加主键：
			alter table 表名 add primary key(字段名);

		删除主键：
			alter table 表名 drop primary key;

		建表时主键和auto_increment自增长连用：
			create table 库名.表名(ID  int  primary key  auto_increment，字段2 类型...);	##auto_incremen：代表字段自增长，一般用于ID字段，功能就是通过每次自加1给ID字段进行赋值
	
		在已有表给ID字段添加auto_increment自增长：
			alter  table  表名   modify  字段名  int  not   null  auto_increment;

		删除自增长属性：
			alter  table  表名   modify  id  int  not   null;	

		删除表中所有数据后，重置自增长为1：
			delete  from  库名.表名;
			alter  table  库名.表名  auto_increment=1;


2、主键primary key（下）
	1）复合主键介绍
		表中多个字段一起做主键
		插入记录时，不允许主键字段值同时重复
		
	2）创建复合主键
		建表时创建复合主键：
			create  table  库名.表名(字段1  类型 , 字段2  类型 , 字段3  类型 , primary key(字段名列表)；

		在已有表创建复合主键：
			alter table 表名 add primary key(字段名列表);

		删除复合主键：
			alter table 表名 drop primary key;



3、外键foreign key
	1）使用规则
		外键功能：插入表记录时，字段值在另一个表字段值范围内选择
		使用规则：
			表存储引擎必须是innodb
			字段类型要一致
			被参照字段必须要是索引类型的一种（primary key）

	2）创建外键：
		创建表时添加外键：
			create  table  表名(
				字段名列表，
				foreign  key(需加外键的字段名)  references  关联表名(关联表字段名) 
				on  update  cascade 			##与关联表同步更新
				on  delete  cascade				##与关联表同步删除
			)engine=innodb;	

		在已有表创建外键：
			alter  table  库名.表名  add  constraint  外键名  foreign  key(需加外键表的字段名)  references  关联表名(关联表字段名);
			alter  table  gz  add  constraint  gz_id_wj  foreign  key(gz_id)  references  yg(yg_id);

	3）删除外键：alter  table  表名  drop  foreign  key  外键名；

	4）查看表的创建语句：show create table 表名\G；		##查看外键名

	员工表：
		create  table  yg(
			yg_id  int  primary  key  auto_increment,
			name  char(20)
		);

	工资表：
		create  table  gz(
			gz_id  int  primary  key,
			pay  float(7,2),
			foreign  key(gz_id)  references  yg(yg_id)
			on  update  cascade 
			on  delete  cascade
		);




4、数据导入/导出
	1）查看修改数据导入导出默认检索目录配置：
		查看搜索路径：show variables like "%file%";

		修改搜索路径：vim /etc/my.cnf
			       [mysqld]
			       secure_file_priv="/myload"	##修改默认路径
			       :wq
			       mkdir /myload
			       chown mysql /myload		##修改权限属组
			       systemctl restart mysqld
			       show variables like "%file%";	##再次查看路径
		
		数据导入：（把系统文件的内容存储到数据库的表里）
		命令格式：load  data  infile  "目录/文件"  into  table  库名.表名
			fields  terminated  by  "列分隔符"
			lines  terminated  by  "行分割符";
			
			cp  /etc/passwd   /myload
			create  database  db2;
			create  table  db2.user(
				name  char(15),
				passwd  char(10),
				uid  int,
				gid  int,
				text  varchar(150),
				homedir  char(50),
				shell  char(20)
			);
			load  data  infile  "/myload/passwd"  into  table  db2.user
			fields  terminated by ":"
			lines  terminated by "\n";

		数据导出：（把表记录存储到系统文件里）
		命令格式：select命令 into outfile "目录/文件"  fields  terminated by "列分隔符"  lines  terminated by "行分割符";
			select * from db2.user into outfile "/myload/user.txt";


5、管理表记录：
	1）添加表记录：
		命令格式1：添加1条记录，给所有字段赋值，字段名可以省略不写
			insert  into  库名.表名  values(......);
		命令格式2：添加N条记录，给所有字段赋值
			insert  into  库名.表名  values(......),(.......),(.......);
		命令格式3：添加1条记录，给指定字段赋值，需要写字段名
			insert  into  库名.表名(......) values(......);	##前后字段需要对应
		命令格式4：添加N条记录，给指定字段赋值，需要写字段名
			insert  into  库名.表名(......) values(......),(......),(......);

	2）查看表记录：
		命令格式1：查看所有记录
			select  字段1......字段N  from  库名.表名；
			select  *  from db2.user;
		命令格式2：条件查询
			select  字段1......字段N  from  库名.表名  where  条件表达式；
			select  *  from  db2.user  where  id=1;

	3）修改表记录：
		命令格式1：批量更新
			update  库名.表名  set  字段名=值，字段名=值，字段名=值；
			update  db2.user  set  name=student;
		命令格式2：条件匹配更新
			update  库名.表名  set  字段名=值，字段名=值，where 匹配条件；
			update  db2.user  set  name=root  where  id=1;

	4）删除表记录：
		命令格式1：删除所有记录
			delete  from  库名.表名；
			delete  from  db2.user;
		命令格式2：条件匹配删除
			delete  from  库名.表名  where  条件表达式；
			delete  from  db2.user  where  id=1;